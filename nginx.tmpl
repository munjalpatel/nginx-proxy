# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

server {
	listen 80 default_server;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;
	return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

{{ range $index, $value := $containers }}
upstream {{ $value.Name }} {
	{{ $addrLen := len $value.Addresses }}
	{{/* If only 1 port exposed, use that */}}
	{{ if eq $addrLen 1 }}
		{{ with $address := index $value.Addresses 0 }}
		   # {{ $value.Name }}
		   server {{ $address.IP }}:{{ $address.Port }};
		{{ end }}

	{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
	{{ else if $value.Env.VIRTUAL_PORT }}
		{{ range $i, $address := $value.Addresses }}
		   {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
		   # {{ $value.Name }}
		   server {{ $address.IP }}:{{ $address.Port }};
		   {{ end }}
		{{ end }}

	{{/* Else default to standard web port 80 */}}
	{{ else }}
		{{ range $i, $address := $value.Addresses }}
			{{ if eq $address.Port "80" }}
			# {{ $value.Name }}
			server {{ $address.IP }}:{{ $address.Port }};
			{{ end }}
		{{ end }}
	{{ end }}
}
{{ end }}

server {
    {{ range $ssl, $containers := groupByMulti $ "Env.VIRTUAL_SSL" "," }}
      {{ range $i, $v := $containers }}
        {{ if eq $v.Env.VIRTUAL_HOST $host }}
          listen 443 ssl;
    
          ssl_certificate /etc/nginx/certs/{{ $v.Env.VIRTUAL_SSL }}.crt;
          ssl_certificate_key /etc/nginx/certs/{{ $v.Env.VIRTUAL_SSL }}.key;
        {{ end }}
      {{ end }}
    {{ end }}
    
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	server_name {{ $host }};
	proxy_buffering off;
	error_log /proc/self/fd/2;
	access_log /proc/self/fd/1;

    {{ range $path, $containers := groupByMulti $ "Env.VIRTUAL_PATH" "," }}
      {{ range $i, $v := $containers }}
        {{ if eq $v.Env.VIRTUAL_HOST $host }}
          location {{ $v.Env.VIRTUAL_PATH }} {
            proxy_pass http://{{ $v.Name }};
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

            # HTTP 1.1 support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $proxy_connection;
        }
        {{ end }}
      {{ end }}
    {{ end }}
}
{{ end }}
